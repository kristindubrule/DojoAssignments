1. npm init --y

2. cp package.json

3. npm install --save

4. ng new <angular-app> (ng new sample-app --routing for routing)

5. move angular app to express folder

6. cd <angular-app>

8. ng build (to get dist folder)

8. ng g s http (to get service)

9. Create components if needed (ng g c component_name)

10. app.module.ts:
	import { BrowserModule } from '@angular/platform-browser';
	import { NgModule } from '@angular/core';
	import { HttpClientModule } from '@angular/common/http';
	import { FormsModule } from '@angular/forms';
	import { HttpService } from './http.service';

	imports: [
	    BrowserModule,
	    AppRoutingModule, // if needed
	    FormsModule,
	    HttpClientModule
	]
	
	providers: [
    	HttpService
  	]

11. http.service.ts:
	import { HttpClient } from '@angular/common/http';

	constructor(private _http: HttpClient) { }


12. app.component.ts
	import { Component, OnInit } from '@angular/core';
	import { HttpService } from './http.service';
	import { ActivatedRoute, Params, Router } from '@angular/router';

	export class AppComponent implements OnInit {
	  title = 'app';
	  constructor(private _httpService: HttpService,
	    private _route: ActivatedRoute,
	    private _router: Router) {}

	  ngOnInit() {
	  }

	  goHome() {
	    this._router.navigate(['/home']);
	  }
	}
	

10. (if needed) Add components to app-routing.module.ts:
	import { HomeComponent } from './home/home.component';

	const routes: Routes = [
	  { path: 'home', component: HomeComponent },
	];

13. for url parameters: this._route.params.subscribe((params: Params) => {});
	import { ActivatedRoute, Params, Router } from '@angular/router';

	private _route: ActivatedRoute,
    private _router: Router

14.	server.js:


	// Require the Express Module
	const express = require('express');
	const app = express();

	// Require body-parser (to receive post data from clients)
	const bodyParser = require('body-parser');
	app.use(bodyParser.json());
	app.use(express.static( __dirname + '/client/dist' ));

	// Require path
	const path = require('path');
	app.use(express.static(path.join(__dirname, './static')));

	app.all("*", (req,res,next) => {
	    res.sendFile(path.resolve("./client/dist/index.html"))
	  });

	// Setting our Server to Listen on Port: 8000
	app.listen(8000, function() {
	    console.log("listening on port 8000");
	})

15.	mongoose in server.js

	const mongoose = require('mongoose');
	mongoose.connect('mongodb://localhost/<schema-plural>');
	var validate = require('mongoose-validator')
	var extend = require('mongoose-validator').extend
	const ObjectId = require('mongodb').ObjectID;

	const <schema-singular>Schema = new mongoose.Schema({
	    name: { type: String, required:true, minlength:3 }
	}, {timestamps: true});

	const <schema-singular> = mongoose.model('<schema-singular>', <schema-singular>Schema);

	// Use native promises
	mongoose.Promise = global.Promise;

basic routes

	app.get('/<schema-plural>', function(req, res) {
        <schema-singular>.find({}).sort([["createdAt",-1]]).exec(function(err,<schema-plural>) {
            if (err) {
                res.json({message: "Error", error: err });
            } else {
                res.json({message: "Success", <schema-plural>: <schema-plural>});
            }
        });

    });

    app.post('/<schema-plural>', function(req,res) {
        console.log('Adding <schema-singular>');
        let <schema-singular> = new <schema-singular>(req.body);
        <schema-singular>.save(function(err) {
            if (err) {
                console.log(<schema-singular>.errors);
                res.json({message: "Error", errors: <schema-singular>.errors});
            } else {
                console.log('Saved <schema-singular>');
                res.json({message: "Success"});
            }
        })
    });

16. Set up service (get all, get one, delete, edit)

17. bootstrap css file:
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

18. ng build --watch

19. nodemon server.js

-----

Common:

- Mongoose sorting:
  sort([[sortVar, 1]])

- Forms
	<div id="noteForm">
	  <form id="add" (ngSubmit)="addNote(); noteForm.reset()" #noteForm="ngForm">
	    Note:
	    <textarea class="form-control" id="text" rows=5 cols=20
	      required
	      minlength="3"
	      [(ngModel)]="note.text" name="text"
	      #text="ngModel"
	    >
	    </textarea>
	    <div [hidden]="text.valid || text.pristine" class="alert alert-danger">
	      A note must be at least 3 characters
	    </div>
	    <button type="submit" class="btn btn-info" [disabled]="!noteForm.form.valid">Add Note</button>
	  </form>
	</div>





